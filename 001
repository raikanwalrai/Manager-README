We define "cousin primes" as pairs of prime numbers that differ by 4. 

For example, (3, 7), (7, 11), and (13, 17) are cousin primes.
Write a class-based OOP solution that:
Finds all the cousin primes between two given numbers n and m, where n < m.
For each cousin prime pair (a, b), calculate the sum of digits for both a and b, and 
return the list of tuples (a, b, sum_a, sum_b) where sum_a is the sum of digits of a and sum_b is the sum of digits of b.

class CousinPrimes:
    def __init__(self, n, m):
        self.n = n
        self.m = m

    def check_prime(self, num):
        if num <= 1:
            return False
        counter = 0
        for i in range(1, num + 1):
            if num % i == 0:
                counter += 1
            if counter > 2:
                return False
        return counter == 2 and num > 1

    def sum_of_digits(self, num):
        return sum(int(digit) for digit in str(num))

    def find_cousin_primes(self):
        cousin_primes_list = []
        for i in range(self.n, self.m + 1):
            if self.check_prime(i) and self.check_prime(i + 4) and i + 4 <= self.m:
                sum_a = self.sum_of_digits(i)
                sum_b = self.sum_of_digits(i + 4)
                cousin_primes_list.append((i, i + 4, sum_a, sum_b))
        return cousin_primes_list

# Example usage
cousin_primes_finder = CousinPrimes(3, 50)
result = cousin_primes_finder.find_cousin_primes()
print(result)
