Write a Python class Triangle that accepts the lengths of three sides of a triangle and performs several operations related to triangle properties. The class should:

Check if the triangle is valid: A triangle is valid if the sum of the lengths of any two sides is greater than the length of the third side.
Classify the triangle by its sides: A valid triangle can be classified as Equilateral, Isosceles, or Scalene.
Classify the triangle by its angles: A valid triangle can be classified as Acute, Right, or Obtuse based on the angle between its sides.
Calculate the area of the triangle: Using Heron's formula, calculate the area of a valid triangle.

Description:
The Triangle class is used to perform multiple classifications and calculations based on the sides provided by the user. The class includes the following functionalities:

Is_valid(): Checks whether the triangle is valid using the triangle inequality theorem.
Side_Classification(): Classifies the triangle as Equilateral, Isosceles, or Scalene based on the lengths of its sides.
Angle_Classification(): Classifies the triangle as Acute, Right, or Obtuse based on the angles formed by the sides.
Area(): Calculates the area of the triangle using Heron’s formula if the triangle is valid.

class Triangle:
    def __init__(self, a, b, c):
        """
        Initializes the triangle with sides a, b, and c.
        """
        self.a = a
        self.b = b
        self.c = c

    def is_valid(self):
        """
        Checks if the triangle is valid based on the triangle inequality theorem.
        A triangle is valid if the sum of any two sides is greater than the third side.
        """
        if self.a <= 0 or self.b <= 0 or self.c <= 0:
            return False
        return (self.a + self.b > self.c) and (self.a + self.c > self.b) and (self.b + self.c > self.a)

    def classify_by_sides(self):
        """
        Classifies the triangle based on the lengths of its sides:
        - 'Equilateral' if all sides are equal.
        - 'Isosceles' if exactly two sides are equal.
        - 'Scalene' if all sides are different.
        """
        if not self.is_valid():
            return "Invalid"
        
        if self.a == self.b == self.c:
            return "Equilateral"
        elif self.a == self.b or self.b == self.c or self.a == self.c:
            return "Isosceles"
        else:
            return "Scalene"

    def classify_by_angles(self):
        """
        Classifies the triangle based on its angles using the Pythagorean theorem:
        - 'Acute' if all angles are less than 90 degrees.
        - 'Right' if one angle is exactly 90 degrees.
        - 'Obtuse' if one angle is more than 90 degrees.
        """
        if not self.is_valid():
            return "Invalid"
        
        sides_squared = sorted([self.a ** 2, self.b ** 2, self.c ** 2])
        
        # Using Pythagorean Theorem for classification
        if sides_squared[0] + sides_squared[1] > sides_squared[2]:
            return "Acute"
        elif sides_squared[0] + sides_squared[1] == sides_squared[2]:
            return "Right"
        else:
            return "Obtuse"

    def area(self):
        """
        Calculates the area of the triangle using Heron's formula:
        Area = √(s * (s - a) * (s - b) * (s - c))
        where s is the semi-perimeter: (a + b + c) / 2.
        """
        if not self.is_valid():
            return "Invalid"
        
        s = (self.a + self.b + self.c) / 2
        area = (s * (s - self.a) * (s - self.b) * (s - self.c)) ** 0.5
        return area


# Example usage
try:
    a = float(input("Enter side a: "))
    b = float(input("Enter side b: "))
    c = float(input("Enter side c: "))

    triangle = Triangle(a, b, c)
    
    if triangle.is_valid():
        print(f"Triangle is valid.")
        print(f"Side Classification: {triangle.classify_by_sides()}")
        print(f"Angle Classification: {triangle.classify_by_angles()}")
        print(f"Area of Triangle: {triangle.area()}")
    else:
        print("Invalid Triangle.")
except ValueError:
    print("Please enter valid numeric values for the sides.")


